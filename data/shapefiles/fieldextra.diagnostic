**************************************************************************
  Program fieldextra called with control file 
    pollen.nl
  Diagnostic file created on 2021-02-09 13:27  +0:00
**************************************************************************


RELEASE INFORMATION
===================

Program version v13.3.2 (v13.3.2)
  Using libaec version 1.0.0
  Using jasper version 2.0.14
  Using ecCodes version 2.19.0
  Expecting ecCodes COSMO definitions 2.19.0.3

  Using netcdf-c version 4.4.0
  Using netcdf-fortran version 4.4.4
  Using RTTOV version 11.2.0
  Using icon tools version 2.4.12
Compiled by GCC version 8.3.0
Compiler flags: -cpp -I ../grib1/grib1_gnu/lib/../include -I ../icontools/icontools-2.4.12/icontools_gnu/lib/../include -I ../eccodes/eccodes-2.19.0-Source/eccodes_gnu_omp/lib/../include -I ../rttov/rttov-11.2.0/rttov_gnu/lib/../mod -I ../rttov/rttov-11.2.0/rttov_gnu/lib/../include -I ../netcdf/netcdf-c-4.4.0/netcdf_gnu/lib/../include -I ../netcdf/netcdf-fortran-4.4.4/netcdf_gnu/lib/../include -D_REENTRANT -D HAVE_ICONTOOLS -D NETCDF -march=skylake-avx512 -mmmx -mno-3dnow -msse -msse2 -msse3 -mssse3 -mno-sse4a -mcx16 -msahf -mmovbe -maes -mno-sha -mpclmul -mpopcnt -mabm -mno-lwp -mfma -mno-fma4 -mno-xop -mbmi -mno-sgx -mbmi2 -mno-pconfig -mno-wbnoinvd -mno-tbm -mavx -mavx2 -msse4.2 -msse4.1 -mlzcnt -mrtm -mhle -mrdrnd -mf16c -mfsgsbase -mrdseed -mprfchw -madx -mfxsr -mxsave -mxsaveopt -mavx512f -mno-avx512er -mavx512cd -mno-avx512pf -mno-prefetchwt1 -mclflushopt -mxsavec -mxsaves -mavx512dq -mavx512bw -mavx512vl -mno-avx512ifma -mno-avx512vbmi -mno-avx5124fmaps -mno-avx5124vnniw -mclwb -mno-mwaitx -mno-clzero -mpku -mno-rdpid -mno-gfni -mno-shstk -mno-avx512vbmi2 -mno-avx512vnni -mno-vaes -mno-vpclmulqdq -mno-avx512bitalg -mno-movdiri -mno-movdir64b --param l1-cache-size=32 --param l1-cache-line-size=64 --param l2-cache-size=25344 -mtune=skylake-avx512 -O3 -funroll-loops -fno-trapping-math -fno-signaling-nans -ffinite-math-only -fopenmp


MULTIPROCESSING STATUS
======================

OpenMP enabled
 Total number of OpenMP threads used by program: 1
 Parallel import inactive (n_ompthread_collect=1)
 Number of threads available for regrid in collect step: 1
 Number of concurrent output processed in generate step: 1
 Number of threads used by operators in generate step: 1


OUTPUT PRODUCTION
=================
Call 3 of generate_output:
Production with    1 OMP thread(s)
File mod_pollen_c1e_osm.csv (all contributing input collected)


CODE TIMING
===========

The next table reports the total time spent in the program (Total), and the distribution
of this time in the pre-processing part, the preparation of pseudo output and the
production of standard output. The detailed distribution for the standard output
is reported in the last part of the table. Both absolute values and percentual
values with respect to the total time are given. When available, the speedup of
the parallel sections of the code are displayed in the last column (speedup takes
parallel region overhead into account). All reported values are based on wall clock
time, and include also idle time and time used by the input/output subsystem.

                              WALL CLOCK                       SPEEDUP
                                 PROGRAM       [s]       [%]   OUTLOOP
           --------------------------------------------------  -------
                                   Total     6.689   100.000
                                 -------Total           -----  -------
                           Preprocessing     0.296     4.427
                  Prepare incore storage     1.542    23.052
           Production of standard output     4.851    72.521
                                 -------Incore storage  -----  -------
                          Wait for input     0.002     0.037
            Unpack and process meta data     1.322    19.762
                             Unpack data     0.010     0.150
                                   Other     0.207     3.102
                                 -------Standard output -----  -------
                  Parallel: Collect data     4.829    72.193     1.000    (see next tables for details)
               Parallel: Generate output     0.022     0.327     0.940    (see next tables for details)
                                   Other     0.000     0.001
           --------------------------------------------------  -------


The next tables reports the cumulated time spent in different regions of the outer loops
(cumulated time is the sum over each thread of the time spent in the corresponding part
of the code; it is the same as wall clock time for sequential code).

                        CUMULATED TIMING
                            COLLECT DATA       [s]       [%]
           --------------------------------------------------
                                   Total     4.829   100.000
                                 -------Total           -----
               Generate on-demand fields     0.000     0.000
                          Wait for input     0.002     0.044
                   Unpack records (open)     0.000     0.002
               Unpack records (metadata)     4.592    95.098
                 (EcCodes: new_from_file     4.264    88.313)
                   Unpack records (data)     0.008     0.161
                        Process metadata     0.055     1.144
                            Match record     0.003     0.057
                                  Regrid     0.000     0.000
                                   Store     0.001     0.020
                                   Other     0.168     3.474
           --------------------------------------------------

                        CUMULATED TIMING
                         GENERATE OUTPUT       [s]       [%]
           --------------------------------------------------
                                   Total     0.021   100.000
                                 -------Total           -----
                                    Sort     0.000     0.247
                                 Prepare     0.000     0.585
                                   Write     0.015    74.797
                                   Other     0.004    20.750
           --------------------------------------------------


MEMORY USAGE
============

Reporting on memory usage is based on tracking dynamic memory allocation within the program.

Currently only fxtr_kernel and its associated modules are monitored.
The real usage is larger than the reported value, but for large problems the additional
untracked memory is relatively small. All estimations use the following size of fortran
objects, in byte:
             CHARACTER 1     LOGICAL 4     INTEGER 4        REAL 4

The high water mark is the highest value during the execution of the program, this is
the value which is compared against soft_memory_limit at run time (see &RunSpecification).

                            MEMORY USAGE       [MByte]
                     ---------------------------------------------------------------------------
                         High water mark        21.054
                              Soft limit     20480.000
                     ---------------------------------------------------------------------------


RUNTIME STATUS
==============

Program successfully completed

